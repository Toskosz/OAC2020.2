.data
.include "paesq1.data"
.include "padir1.data"
.include "paesq2.data"
.include "padir2.data"
.include "paesq3.data"
.include "padir3.data"
.include "background.data"
.include "100mclaro.data"
.include "100rclaro.data"
.include "start.data"

.text

MAIN:
	#jal TRANSPARENTE
	jal BCKGRND		# desenha cenario 1 no frame 0
	jal START		# escreve o texto de comandos
	
	jal PA_ESQ_1		# 
	jal PA_DIR_1		#	Desenha as pas iniciais
	jal PA_ESQ_1_CIMA	#
	jal PA_DIR_1_CIMA	#
	
	jal KEY1		# recebe o comando de confirmação para iniciar o jogo
	jal APAGA_START		# apaga o texto de comandos
	jal COMANDO		# recebe o comando do jogador
	
	li a7,10		# encerra o game
	ecall

COMANDO:
	li s0,113	# q em ascii
	li s1,101	# e em ascii		comando das pás
	li s2,97	# a em ascii
	li s3,100	# d em ascii
	li t1,0xFF200000		# carrega o endereço de controle do KDMMIO
LOOP_COMANDO: 	
	lw t0,0(t1)			# Le bit de Controle Teclado
   	andi t0,t0,0x0001		# mascara o bit menos significativo
   	beq t0,zero,LOOP_COMANDO	# não tem tecla pressionada então volta ao loop
   	lw t2,4(t1)			# le o valor da tecla
  	sw t2,12(t1)  			# escreve a tecla pressionada no display
  	
  	addi sp,sp,-20			#
  	sw t2,16(sp)			#
	sw s3,12(sp)			#	Guarda valores de comandos na pilha
	sw s2,8(sp)			#
	sw s1,4(sp)			#
	sw s0,0(sp)			#
  	beq t2,s2,PA_ESQ_2		# Confere se é um 'a'
  	jal PA_ESQ_1			# Se não for abaixa a pa esquerda de baixo
A:  	lw t2,16(sp)			# carrega t2 da pilha
	lw s3,12(sp)			# carrega s3 da pilha
  	beq t2,s3,PA_DIR_2		# Confere se é um 'd'
  	jal PA_DIR_1			# Se não for abaixa a pa direita de baixo
B:  	lw t2,16(sp)			# carrega t2 da pilha
	lw s0,0(sp)			# carrega s0 da pilha 
  	beq t2,s0,PA_ESQ_2_CIMA		# Confere se é um 'q'
  	jal PA_ESQ_1_CIMA		# Se não for abaixa a pa esquerda de cima
C:  	lw t2,16(sp)			# carrega t2 da pilha
	lw s1,4(sp)			# carrega s1 da pilha
  	beq t2,s1,PA_DIR_2_CIMA		# Confere se é um 'e'
  	jal PA_DIR_1_CIMA		# Se não for abaixa a pa direita de cima
D:  	addi sp,sp,20			# reseta a pilha
	j COMANDO			# retorna
	
### Espera o usuário pressionar uma tecla
KEY1: 	li t1,0xFF200000		# carrega o endereço de controle do KDMMIO
LOOP: 	lw t0,0(t1)			# Le bit de Controle Teclado
   	andi t0,t0,0x0001		# mascara o bit menos significativo
   	beq t0,zero,LOOP		# não tem tecla pressionada então volta ao loop
   	lw t2,4(t1)			# le o valor da tecla
  	sw t2,12(t1)  			# escreve a tecla pressionada no display
	ret				# retorna

BCKGRND:
	# Carrega o background do cenário 1
FORA:	li t1,0xFF000000	# endereco inicial da Memoria VGA - Frame 0
	li t2,0xFF012C00	# endereco final 
	la s1,background	# endereço dos dados da tela na memoria
	addi s1,s1,8		# primeiro pixels depois das informações de nlin ncol
LOOP2: 	beq t1,t2,FIM		# Se for o último endereço então sai do loop
	lb t3,0(s1)		# le um conjunto de 4 pixels : word
	sb t3,0(t1)		# escreve a word na memória VGA
	addi t1,t1,1		# soma 4 ao endereço
	addi s1,s1,1
	j LOOP2			# volta a verificar

PA_ESQ_1:			# Desenha a pa esquerda de baixo em posição inicial
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,35		# x inicial da pa 
	li a1,217		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial + a0
	
	li a2,64		# x final da pa
	li a3,225		# y final da pa
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,paesq1		# endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# quantidade de colunas desenhadas
	addi s0,s0,8		# primeiro bit da pa
LOOP1:	lb t3,0(s0)		# LOOP de pintar linha
	sb t3,0(a0)
	addi t2,t2,1		# +1 coluna pintada
	addi s0,s0,1		# proximo byte da imagem
	beq t2,t0,PFIM		# confere se ja pintou todas as colunas da linha
	addi a0,a0,1		# se não vai pro proximo endereco
	j LOOP1


PFIM:	beq a0,a2,FIM		# confere se o endereco da ultima coluna bate com o endereco final da imagem
	addi a0,a0,320		# pula linha
	addi a0,a0,-29		# vai pro começo da linha
	li t2,0			# volta para zero linhas pintadas
	j LOOP1

FIM:	
	ret
	
PA_ESQ_2:			# Pinta o segundo frame da pa 
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,35		# x inicial da pa 
	li a1,217		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,64		# x final da pa
	li a3,225		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,paesq2		# endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# colunas pintadas até o momento
	addi s0,s0,8		# primeiro bit da pa	
LOOP_PAE_2:			# loop de pintar linha do segundo frame da pa esquerda
	lb t3,0(s0)
	sb t3,0(a0)
	addi t2,t2,1		# +1 coluna pintada
	addi s0,s0,1		# proximo byte da imagem
	beq t2,t0,PAEFIM_2	# verifica se pintou todas as colunas da linha
	addi a0,a0,1		# proximo endereco da linha
	j LOOP_PAE_2
	
PAEFIM_2:
	beq a0,a2,PA_ESQ_3	# verifica se o endereco atual é o endereco final da imagem
	addi a0,a0,320		# pula pra proxima linha
	addi a0,a0,-29		# volta para o começo da linha
	li t2,0			# reseta as colunas pintadas
	j LOOP_PAE_2
	
PA_ESQ_3:			# pinta terceiro frame da pa esquerda de baixo
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,35		# x inicial da pa 
	li a1,217		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y0 x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,64		# x final da pa
	li a3,225		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,paesq3		# endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# colunas pintadas da linha
	addi s0,s0,8		# primeiro bit da pa
LOOP_PAE_3:			# loop de pintar linha
	lb t3,0(s0)
	sb t3,0(a0)
	addi t2,t2,1		# +1 coluna pintada
	addi s0,s0,1		# proximo byte da imagem
	beq t2,t0,PAEFIM_3	# verifica se pintou as colunas da linha
	addi a0,a0,1		# proximo endereco da linha
	j LOOP_PAE_3
PAEFIM_3:
	beq a0,a2,FIME_3	# verifica se o endereco atual é o ultimo
	addi a0,a0,320		# proxima linha
	addi a0,a0,-29		# volta para a primeira coluna
	li t2,0			# reseta as colunas pintadas
	j LOOP_PAE_3
	
FIME_3:
	j A			# volta para a função de comandos 




PA_DIR_1:			# pintar frame da pa direita de baixo
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,85		# x inicial da pa 
	li a1,217		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,114		# x final da pa
	li a3,225		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,padir1		# carrega endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# numero de colunas pintadas
	addi s0,s0,8		# primeiro bit da pa
	j LOOP1
	
PA_DIR_2:			# pintar frame 2 da pa direita de baixo
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,85		# x inicial da pa 
	li a1,217		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,114		# x final da pa
	li a3,225		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,padir2		# carrega endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# numero de colunas pintadas da linha
	addi s0,s0,8		# primeiro bit da pa
LOOP_PAD_2:			# loop de pintar linha
	lb t3,0(s0)
	sb t3,0(a0)
	addi t2,t2,1		# +1 coluna pintada
	addi s0,s0,1		# proximo byte da imagem
	beq t2,t0,PADFIM_2	# verifica se pintaram todas as colunas da linha
	addi a0,a0,1		# proximo endereco 
	j LOOP_PAD_2
	
PADFIM_2:
	beq a0,a2,PA_DIR_3	# verifica se endereco atual é o endereco final
	addi a0,a0,320		# pula pra proxima linha
	addi a0,a0,-29		# volta para começo da linha
	li t2,0			# reseta colunas pintadas
	j LOOP_PAD_2
	
PA_DIR_3:			# pinta frame 3 da pa direita de baixo
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,85		# x inicial da pa 
	li a1,217		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,114		# x final da pa
	li a3,225		# y inicial da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,padir3		# carrega endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# numero de colunas pintadas da linha
	addi s0,s0,8		# primeiro bit da pa
LOOP_PAD_3:			# loop de pintar linha
	lb t3,0(s0)
	sb t3,0(a0)
	addi t2,t2,1		# +1 coluna pintada
	addi s0,s0,1		# proximo byte da imagem
	beq t2,t0,PADFIM_3	# verifica se foi pintada as colunas da linha
	addi a0,a0,1		# proximo endereco
	j LOOP_PAD_3
PADFIM_3:		
	beq a0,a2,FIMD_3	# verifica se endereco atual é o endereco final
	addi a0,a0,320		# proximo linha
	addi a0,a0,-29		# primeira coluna da linha
	li t2,0			# reseta colunas pintadas
	j LOOP_PAD_3
	
FIMD_3:
	j B 			# volta para função de comandos

PA_ESQ_1_CIMA:			# pinta frame 1 da pa esquerda de cima
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,35		# x inicial da pa 
	li a1,100		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,64		# x final da pa
	li a3,108		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,paesq1		# carrega endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# numero de colunas pintadas na linha
	addi s0,s0,8		# primeiro bit da pa
	j LOOP1

PA_ESQ_2_CIMA:			# pinta frame 2 da pa esquerda de cima
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,35		# x inicial da pa 
	li a1,100		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,64		# x final da pa
	li a3,108		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,paesq2		# carrega endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# numero de colunas pintadas na linha
	addi s0,s0,8		# primeiro bit da pa
LOOP_PAEC_2:			# loop de pintar linha
	lb t3,0(s0)
	sb t3,0(a0)
	addi t2,t2,1		# +1 coluna pintada
	addi s0,s0,1		# proximo byte da imagem
	beq t2,t0,PAECFIM_2	# verifica se as colunas da linha foram pintadas
	addi a0,a0,1		# proximo endereco
	j LOOP_PAEC_2
	
PAECFIM_2:
	beq a0,a2,PA_ESQ_3_CIMA	# verifica se endereco atual é o endereco final
	addi a0,a0,320		# proxima linha
	addi a0,a0,-29		# primeira coluna da linha
	li t2,0			# reseta colunas pintadas
	j LOOP_PAEC_2

PA_ESQ_3_CIMA:			# pinta frame 3 da pa esquerda de cima
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,35		# x inicial da pa 
	li a1,100		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,64		# x final da pa
	li a3,108		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,paesq3		# carrega endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# numero de colunas pintadas
	addi s0,s0,8		# primeiro bit da pa
LOOP_PAEC_3:			# loop de pintar linha
	lb t3,0(s0)
	sb t3,0(a0)
	addi t2,t2,1		# +1 coluna pintada na linha
	addi s0,s0,1		# proximo byte da imagem
	beq t2,t0,PAECFIM_3	# verifica se foram pintadas todas as colunas da linha
	addi a0,a0,1		# proximo endereco
	j LOOP_PAEC_3
PAECFIM_3:
	beq a0,a2,FIMEC_3	# verifica se endereco atual é o endereco final
	addi a0,a0,320		# proxima linha
	addi a0,a0,-29		# primeira coluna da linha
	li t2,0			# reseta colunas pintadas
	j LOOP_PAEC_3
	
FIMEC_3:
	j C			# volta pra função de comando
	
PA_DIR_1_CIMA:			# pinta frame 1 da pa direita de cima
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,85		# x inicial da pa 
	li a1,100		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,114		# x final da pa
	li a3,108		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,padir1		# carrega endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# numero de colunas pintadas
	addi s0,s0,8		# primeiro bit da pa
	j LOOP1
	
PA_DIR_2_CIMA:			# pinta frame 2 da pa direita de cima
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,85		# x inicial da pa 
	li a1,100		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,114		# x final da pa
	li a3,108		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,padir2		# carrega endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# numero de colunas pintadas da linha
	addi s0,s0,8		# primeiro bit da pa
LOOP_PADC_2:			# loop de pintar linha
	lb t3,0(s0)
	sb t3,0(a0)
	addi t2,t2,1		# +1 coluna pintada
	addi s0,s0,1		# proximo byte da imagem
	beq t2,t0,PADCFIM_2	# verifica se foram pintadas todas as colunas da linha
	addi a0,a0,1		# proximo endereco
	j LOOP_PADC_2
	
PADCFIM_2:
	beq a0,a2,PA_DIR_3_CIMA	# verifica se o endereco atual é o endereco final
	addi a0,a0,320		# proxima linha
	addi a0,a0,-29		# volta para o começo da linha
	li t2,0			# reseta as colunas pintadas
	j LOOP_PADC_2
	
PA_DIR_3_CIMA:			# pinta frame 3 da pa direita de cima
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,85		# x inicial da pa 
	li a1,100		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,114		# x final da pa
	li a3,108		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,padir3		# carrega endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# numero de colunas pintadas
	addi s0,s0,8		# primeiro bit da pa
LOOP_PADC_3:			# loop de pintar linha
	lb t3,0(s0)
	sb t3,0(a0)
	addi t2,t2,1		# +1 coluna pintada
	addi s0,s0,1		# proximo byte da imagem
	beq t2,t0,PADCFIM_3	# verifica se todas as colunas foram pintadas
	addi a0,a0,1		# proximo endereco
	j LOOP_PADC_3
PADCFIM_3:
	beq a0,a2,FIM_3		# verifica se endereco atual é endereco final
	addi a0,a0,320		# proxima linha
	addi a0,a0,-29		# primeira coluna da linha
	li t2,0			# reseta numero de colunas pintadas
	j LOOP_PADC_3
	
FIM_3: j D			# volta para função de comando
		

MARROM:				# pinta o 100 marrom ativado(claro)
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,65		# x inicial da pa 
	li a1,172		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,83		# x final da pa
	li a3,184		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,mclaro		# carrega endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# numero de colunas pintadas
	addi s0,s0,8		# primeiro bit da pa
	j LOOP3			# vai pro loop de pintar cem's
	
R_CIMA:				# pinta o 100 rosa de cima ativado(claro)
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,65		# x inicial da pa 
	li a1,43		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,83		# x final da pa
	li a3,55		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,rclaro		# carrega endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# numero de colunas pintadas
	addi s0,s0,8		# primeiro bit da pa
	j LOOP3			# loop de pintar cem's
	
R_DIREITA:			# pinta o 100 rosa da direita ativado(claro)
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,89		# x inicial da pa 
	li a1,155		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,107		# x final da pa
	li a3,167		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,rclaro		# carrega endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# numero de colunas pintadas
	addi s0,s0,8		# primeiro bit da pa
	j LOOP3			# loop de pintar cem's

R_ESQUERDA:			# pinta o 100 rosa da esquerda ativado(claro)
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,41		# x inicial da pa 
	li a1,155		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,59		# x final da pa
	li a3,167		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,rclaro		# carrega endereco da imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# numero de colunas pintadas
	addi s0,s0,8		# primeiro bit da pa
	j LOOP3			# loop de pintar cem's
		
LOOP3:	lb t3,0(s0)		# loop de pintar cem's
	sb t3,0(a0)
	addi t2,t2,1		# +1 coluna pintada
	addi s0,s0,1		# proximo byte da imagem
	beq t2,t0,CFIM		# verifica se as colunas da linha foram pintadas
	addi a0,a0,1		# proximo endereco
	j LOOP3			
	
CFIM:	beq a0,a2,FIM		# verifica se endereco atual é o endereco final
	addi a0,a0,320		# proxima linha
	addi a0,a0,-18		# primeira coluna da linha
	li t2,0			# reseta colunas pintadas
	j LOOP3
	
	
APAGA_BOLA_1:			# Apaga bola de vida 1
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,228		# x inicial da pa 
	li a1,115		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x +(y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,242		# x final da pa
	li a3,129		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	li t0,15		# carrega colunas
	li t1,15		# carrega linhas
	li t2,0			# numero de colunas pintadas
	li t3,0			# carrega a cor zero em t3
LOOP_APAGA_BOLA:		# loop de apagar(pintar de preto)
	sb t3,0(a0)
	addi t2,t2,1		# +1 coluna pintada
	beq t2,t0,BFIM		# verifica se as colunas da linha foram pintadas
	addi a0,a0,1		# proxmio endereco
	j LOOP_APAGA_BOLA

BFIM:	beq a0,a2,FIM		# verificar se endereco atual é o endereco final
	addi a0,a0,320		# proxima linha
	addi a0,a0,-14		# primeira coluna
	li t2,0			# reseta colunas pintadas
	j LOOP_APAGA_BOLA
	
APAGA_BOLA_2:			# apaga/pinta de preto bola de vida 2
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,246		# x inicial da pa 
	li a1,115		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,260		# x final da pa
	li a3,129		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	li t0,15		# carrega colunas
	li t1,15		# carrega linhas
	li t2,0			# numero de colunas pintadas
	li t3,0			# carrega cor preta em t3
	j LOOP_APAGA_BOLA	# loop de apagar bola
	
APAGA_BOLA_3:			# apaga/pinta de preto bola de vida 3
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,264		# x inicial da pa 
	li a1,115		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,278		# x final da pa
	li a3,129		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	li t0,15		# carrega colunas
	li t1,15		# carrega linhas
	li t2,0			# numero de colunas pintadas da linha
	li t3,0			# carrega cor preta
	j LOOP_APAGA_BOLA	# loop de apagar bola
	
APAGA_MOLA:			# apagar/pintar de preto a mola 
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,150		# x inicial da pa 
	li a1,203		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,160		# x final da pa
	li a3,215		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	li t0,11		# carrega colunas
	li t1,13		# carrega linhas
	li t2,0			# numero de colunas pintadas
	li t3,0			# carrega cor preta em t3
LOOP_MOLA:			# loop de apagar mola
	sb t3,0(a0)
	addi t2,t2,1		# +1 coluna pintada
	beq t2,t0,MFIM		# verifica se as colunas da linha foram pintadas
	addi a0,a0,1		# proximo endereco
	j LOOP_MOLA		

MFIM:	beq a0,a2,FIM		# verifica se endereco atual é o endereco final
	addi a0,a0,320		# proxima linha
	addi a0,a0,-10		# primeira coluna da linha
	li t2,0			# reseta as colunas pintadas
	j LOOP_MOLA
	

TRANSPARENTE:			# funcao de deixar frame 0 trnaparenbte nao tamo usando 
	li t1,0xFF000000	# endereco inicial da Memoria VGA - Frame 0
	li t2,0xFF012C00	# endereco final 
	li t3,0xC7
LOOP_T: 	
	beq t1,t2,FIM		# Se for o último endereço então sai do loop
	sb t3,0(t1)		# escreve a word na memória VGA
	addi t1,t1,1		# soma 4 ao endereço
	j LOOP_T			# volta a verificar
	
START:				# pinta instruçõe de start 
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,171		# x inicial da pa 
	li a1,132		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,315		# x final da pa
	li a3,235		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	la s0,start		# carrega endereco de imagem
	lw t0,0(s0)		# carrega colunas
	lw t1,4(s0)		# carrega linhas
	li t2,0			# numero de colunas pintadas
	addi s0,s0,8		# primeiro bit da pa
LOOP4:	lb t3,0(s0)		# loop de pintar linha
	sb t3,0(a0)
	addi t2,t2,1		# +1 coluna pintada
	addi s0,s0,1		# proximo byte da imagem
	beq t2,t0,SFIM		# verifica se as colunas da linha foram pintadas
	addi a0,a0,1		# proximo endereco
	j LOOP4
	
SFIM:	beq a0,a2,FIM		# verifica se endereco atual é o endereco final
	addi a0,a0,320		# proxima linha
	addi a0,a0,-144		# primeira coluna da linha
	li t2,0			# reseta colunas pintadas
	j LOOP4
	
APAGA_START:			# apaga as instrução após começo do game
	li t0,0xFF000000	# endereco inicial bitmap 
	li a0,175		# x inicial da pa 
	li a1,216		# y inicial da pa
	li t1,320		# dim do bitmap
	mul a1,a1,t1		# y x 320
	add a0,a0,a1		# x + (y x 320)
	add a0,a0,t0		# a0 = endereco inicial
	
	li a2,302		# x final da pa
	li a3,229		# y final da pa
	li t1,320
	mul a3,a3,t1
	add a2,a2,a3
	add a2,a2,t0		# a2 = endereco final da pa
	
	li t0,128		# carrega colunas
	li t1,14		# carrega linhas
	li t2,0			# numero de colunas pintadas
	li t3,0			# carrega cor preta
LOOP_AS:			# loop de pintar linha
	sb t3,0(a0)
	addi t2,t2,1		# +1 coluna pintada
	beq t2,t0,ASFIM		# verifica se as colunas da linha foram pintadas 
	addi a0,a0,1		# proximo endereco
	j LOOP_AS

ASFIM:	beq a0,a2,FIM		# verifica se endereco atual é endereco final
	addi a0,a0,320		# proxima linha
	addi a0,a0,-127		# primeira coluna da linha
	li t2,0			# reseta coluna 
	j LOOP_AS
	
